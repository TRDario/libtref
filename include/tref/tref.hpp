#pragma once
#include <cstddef>
#include <cstdint>
#include <iostream>
#include <span>
#include <stdexcept>
#include <unordered_map>

/**********************************************************************************************************************
 * Namespace containing all tref functionality.
 **********************************************************************************************************************/
namespace tref {
	/******************************************************************************************************************
	 * Unicode codepoint type.
	 ******************************************************************************************************************/
	using Codepoint = std::uint32_t;

	/******************************************************************************************************************
	 * Font glyph information.
	 ******************************************************************************************************************/
	struct Glyph {
		/**************************************************************************************************************
		 * The top-left corner of the glyph's texture box.
		 **************************************************************************************************************/
		std::uint16_t x, y;

		/**************************************************************************************************************
		 * The size of the glyph's texture box.
		 **************************************************************************************************************/
		std::uint16_t width, height;

		/**************************************************************************************************************
		 * The offset at which to draw the glyph's texture compared to its actual
		 *position.
		 **************************************************************************************************************/
		std::int16_t xOffset, yOffset;

		/**************************************************************************************************************
		 * The distance to move forward by after drawing this glyph.
		 **************************************************************************************************************/
		std::int16_t advance;

		friend constexpr bool operator==(const Glyph&, const Glyph&) noexcept = default;
	};

	/******************************************************************************************************************
	 * Shorthand for a collection of glyphs with associated codepoints.
	 ******************************************************************************************************************/
	using GlyphMap = std::unordered_map<Codepoint, Glyph>;

	/******************************************************************************************************************
	 * Simple bitmap class used for output.
	 ******************************************************************************************************************/
	class OutputBitmap {
	  public:
		/**************************************************************************************************************
		 * Constructs a bitmap from existing data.
		 *
		 * @param data The bitmap data.
		 * @param width The bitmap width.
		 * @param height The bitmap height.
		 **************************************************************************************************************/
		OutputBitmap(std::byte* data, unsigned int width, unsigned int height) noexcept;

		/**************************************************************************************************************
		 * Deallocates the bitmap.
		 **************************************************************************************************************/
		~OutputBitmap() noexcept;

		/**************************************************************************************************************
		 * Gets the bitmap's data.
		 *
		 * @return The bitmap's data. The data is encoded in RGBA8 format.
		 **************************************************************************************************************/
		std::span<const std::byte> data() const noexcept;

		/**************************************************************************************************************
		 * Gets the bitmap's width.
		 *
		 * @return The bitmap's width.
		 **************************************************************************************************************/
		unsigned int width() const noexcept;

		/**************************************************************************************************************
		 * Gets the bitmap's height.
		 *
		 * @return The bitmap's height.
		 **************************************************************************************************************/
		unsigned int height() const noexcept;

	  private:
		std::byte*   _data;
		unsigned int _width;
		unsigned int _height;
	};

	/******************************************************************************************************************
	 * Error thrown when decoding a tref file fails.
	 ******************************************************************************************************************/
	struct DecodingError : std::runtime_error {
		using runtime_error::runtime_error;
	};

	/******************************************************************************************************************
	 * tref file decoding result.
	 ******************************************************************************************************************/
	struct DecodingResult {
		/**************************************************************************************************************
		 * The distance between lines in pixels.
		 **************************************************************************************************************/
		std::int32_t lineSkip;

		/**************************************************************************************************************
		 * The font glyph data.
		 **************************************************************************************************************/
		GlyphMap glyphs;

		/**************************************************************************************************************
		 * The font bitmap data.
		 **************************************************************************************************************/
		OutputBitmap bitmap;
	};

	/******************************************************************************************************************
	 * Decodes a tref file from a stream.
	 *
	 * @exception DecodingError If decoding the data fails.
	 *
	 * @param[in] is The input data stream.
	 *
	 * @return The font information.
	 ******************************************************************************************************************/
	DecodingResult decode(std::istream& is);

	///

	/******************************************************************************************************************
	 * Struct containing data about the bitmap to encode into a tref file.
	 ******************************************************************************************************************/
	struct InputBitmap {
		/**************************************************************************************************************
		 * Pointer to the beginning of the bitmap data.
		 **************************************************************************************************************/
		const void* data;

		/**************************************************************************************************************
		 * The size of the bitmap.
		 **************************************************************************************************************/
		unsigned int width, height;
	};

	/******************************************************************************************************************
	 * Error thrown when encoding a tref file fails.
	 ******************************************************************************************************************/
	struct EncodingError : std::runtime_error {
		using runtime_error::runtime_error;
	};

	/******************************************************************************************************************
	 * Encodes a tref file and writes it to a stream.
	 *
	 * @exception EncodingError If encoding the data fails.
	 *
	 * @param[out] os The output data stream.
	 * @param[in] lineSkip The distance between lines in pixels.
	 * @param[in] glyphs The font glyph data.
	 * @param[in] bitmap The font bitmap data.
	 ******************************************************************************************************************/
	void encode(std::ostream& os, std::int32_t lineSkip, const GlyphMap& glyphs, const InputBitmap& bitmap);

} // namespace tref